---
title: "Johns Hopkins Hospital Sequencing Frequency Report"
author: Elgin Akin
date: 2024-04-24
execute: 
  echo: false
format: 
  html:
    page-layout: full
    code-fold: true
    embed-resources: true
    toc: true
---

Most recent run: **IV25Run14**

```{r}
#| echo: false
#| output: false 

library(tidyverse)
library(RColorBrewer)
library(plotly)

data <- read_tsv("../reports/report.tsv")

data_filtered <- data %>% 
  dplyr::filter(
    subtype %in% c("H1N1", "H3N2", "Victoria"), 
    date >= as.Date("2023-01-01") & date <= as.Date("2025-12-31")
  ) %>%
  dplyr::mutate(date_run = paste(date, sequencing_run, sep = " | ")) 

# Ensure date_run is ordered chronologically
data_filtered <- data_filtered %>%
  mutate(date = as.Date(date)) %>%  # Ensure the date is in Date format
  arrange(date) %>%  # Sort data by date
  mutate(date_run = factor(date_run, levels = unique(date_run)))  # Create factor with ordered levels

```


## Subtype plot

```{r}
#| echo: FALSE
#| output: FALSE 
#| column: screen-inset-shaded 

# Define Dark2 palette for the subtypes
dark2_colors <- brewer.pal(n = 3, name = "Dark2")

# Plot stacked bar chart (showing each date-run pair separately)
subtype_frequency = ggplot(data_filtered, aes(x = factor(date_run, levels = unique(date_run)), fill = subtype)) +
  geom_bar(position = "stack") +
  scale_fill_manual(values = dark2_colors) +  # Apply Dark2 palette
  labs(title = "Influenza Subtype Frequency Over Time",
       x = "Date | Sequencing Run",
       y = "Number of Sequences",
       fill = "Subtype") +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))  +
  geom_text(stat = "count", aes(label = after_stat(count)), position = position_stack(vjust = 0.5))


```

```{r}
#| column: screen-inset-shaded 
ggplotly(subtype_frequency)

ggsave(filename = paste0("../figures/subtype_frequency.png"), plot = subtype_frequency, width = 10, height = 4)
```

# Clade and Subclade Frequency
```{r}
#| echo: false
#| output: false 
library(tidyverse)

# Define the clade and subclade color palettes
clade_colors <- c(
  # H1N1
  "6B.1A.5a.2a" = "#a0240e", 
  "6B.1A.5a.2a.1" = "#6265cd", 
  # H3N2
  "3C.2a1b.2a.2a.1b" = "#A4BED5FF",
  "3C.2a1b.2a.2a.3a.1" = "#CC4C24FF", 
  "3C.2a1b.2a.2b" = "#32373AFF", 
  # IBV
  "V1A" = "#FF4500", 
  "V1A.3a.2" = "#00CED1"
)

subclade_colors <- c(
  # H1N1
  "C.1" = "#9A133DFF", 
  "C.1.1" = "#B93961FF", 
  "C.1.7" = "#D8527CFF", 
  "C.1.7.2" = "#F28AAAFF", 
  "C.1.8" = "#F9B4C9FF", 
  "C.1.9" = "#F9E0E8FF", 
  "D" = "#1A318BFF", 
  "D.1" = "#4060C8FF", 
  "D.2" = "#6996E3FF", 
  "D.3" = "#A1C2EDFF", 
  "D.4" = "#C5DAF6FF",
  # IBV
  "A" = "#FF6347", 
  "C.3" = "#00CED1", 
  "C.5" = "#9400D3", 
  "C.5.1" = "#FF1493", 
  "C.5.5" = "#FF8C00", 
  "C.5.6" = "#B0E0E6", 
  "C.5.7" = "#808000", 
  # H3N2
  "G.1.1.2" = "#00496FFF", 
  "G.2" = "#0F85A0FF", 
  "J" = "#EDD746FF", 
  "J.1" = "#ED8B00FF", 
  "J.2" = "#DD4124FF"
)

# Define flu season start date
flu_season_start <- as.Date("2024-10-01")

# Function to generate plots for a given subtype
generate_plots <- function(df, subtype_name) {
  df_filtered <- df %>%
    filter(
      subtype == subtype_name,
      date >= as.Date("2023-01-01") & date <= as.Date("2025-12-31"),
      !is.na(clade) & clade != "",
      !is.na(subclade) & subclade != ""
    ) %>%
    mutate(date_run = paste(date, sequencing_run, sep = " | ")) %>%  # Create a unique date-run label
    arrange(date) %>%  # Ensure data is sorted by date
    mutate(date_run = factor(date_run, levels = unique(date_run)))  # Set factor levels in time order

  # Clade Frequency Plot
  clade_plot <- ggplot(df_filtered, aes(x = date_run, fill = clade)) +
    geom_bar(position = "stack") +
    scale_fill_manual(values = clade_colors) +  # Apply clade color palette
    labs(title = paste(subtype_name, "Clade Frequency"),
         x = "Date | Sequencing Run",
         y = "Frequency",
         fill = "Clade") +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) +
    geom_vline(xintercept = which(levels(df_filtered$date_run) == as.character(flu_season_start)), 
               linetype = "dotted", color = "red", size = 1) +
    geom_text(stat = "count", aes(label = ..count..), position = position_stack(vjust = 0.5))

  # Subclade Frequency Plot
  subclade_plot <- ggplot(df_filtered, aes(x = date_run, fill = subclade)) +
    geom_bar(position = "stack") +
    scale_fill_manual(values = subclade_colors) +  # Apply subclade color palette
    labs(title = paste(subtype_name, "Subclade Frequency"),
         x = "Date | Sequencing Run",
         y = "Frequency",
         fill = "Subclade") +
    theme_classic() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10)) +
    geom_vline(xintercept = which(levels(df_filtered$date_run) == as.character(flu_season_start)), 
               linetype = "dotted", color = "red", size = 1) +
    geom_text(stat = "count", aes(label = ..count..), position = position_stack(vjust = 0.5))

  ggsave(filename = paste0("../figures/", subtype_name, "_clade_plot.png"), plot = clade_plot, width = 10, height = 4)
  ggsave(filename = paste0("../figures/", subtype_name, "_subclade_plot.png"), plot = subclade_plot, width = 10, height = 4)

  return(list(clade_plot = clade_plot, subclade_plot = subclade_plot))
}

# Generate plots for each subtype
h3n2_plots <- generate_plots(data, "H3N2")
h1n1_plots <- generate_plots(data, "H1N1")
victoria_plots <- generate_plots(data, "Victoria")
```

## H3N2
```{r}
#| column: screen-inset-shaded

ggplotly(h3n2_plots$clade_plot)
ggplotly(h3n2_plots$subclade_plot)
```

## H1N1
```{r}
#| column: screen-inset-shaded

ggplotly(h1n1_plots$clade_plot)
ggplotly(h1n1_plots$subclade_plot)
```

## B/Victoria
```{r}
#| column: screen-inset-shaded


ggplotly(victoria_plots$clade_plot)
ggplotly(victoria_plots$subclade_plot)

```

# Interactive Table of all frequency data
```{r}
#| column: screen-inset-shaded
library(tidyverse)
library(DT)

datatable(
  data, 
  extensions = 'Buttons', 
  filter = list(position = 'top', clear = FALSE),
  options = list(
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel', 'print'),
    scrollX = TRUE # Enables horizontal scrolling
  )
) 
```

